# use this for starting the webserver with SSL

worker_processes    auto;
error_log           /var/log/nginx/nginx_error.log debug;

pid                 /var/run/nginx.pid;


events {
    # with on, all the worker processes are active and try to handle all of the incoming request simultaneously.
    # When disabled, Nginx decides which child process gets to deal with the request one by one.
    multi_accept        on;

    # max clients = worker_processes * worker_connections
    worker_connections  1024;
}


http {
    #### default config of nginx ####
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format	upstream_log	'$server_name to $upstream_addr [$request] '
        'upstream_http_content_type $upstream_http_content_type'
        'upstream_response_time $upstream_response_time '
        'msec $msec request_time $request_time'
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/nginx_access.log  upstream_log;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;
    # gzip  on;

    # Compression and Decompression
    # To successfully serve both clients that do and do not accept compressed data use gunzip directive.
    gzip  on;
    gunzip on;
    # gzip is not supported on MS-IE_version-6
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-javascript
        application/xml
        application/x-font-ttf
        font/truetype
        font/opentype
        image/svg+xml
        image/x-icon;

    proxy_buffer_size   128k;
    proxy_buffers   4 256k;
    proxy_busy_buffers_size   256k;

    upstream api-get-python-nodes {
        server api-get-python:5001;
    }

    upstream api-edit-rust-nodes {
        server api-edit-rust:8000;
    }

    upstream pgadmin-nodes {
        server pgadmin:15432;
    }

    upstream keycloak-nodes {
        server keycloak:8080;
    }

    upstream swagger-nodes {
        server swagger-api:8080;
    }

    resolver 8.8.8.8;

    server {
        listen 80;
        server_name your.domain;
        server_tokens off;


        location / {
            return 301 https://$host$request_uri;
        }

        location ~ /.well-known/acme-challenge {
            allow all;
            root /etc/letsencrypt;
        }
    }

    # Server Config
    server {

        listen 80;
        listen 443 default_server ssl;

        ssl_certificate /etc/cert/nginx.pub.pem;
        ssl_certificate_key /etc/cert/nginx.priv.pem;

        location /pgadmin {
            proxy_pass http://pgadmin-nodes;

            proxy_redirect http:// $scheme://;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Script-Name /pgadmin;
        }

        location /swagger/ {
            proxy_pass http://swagger-nodes/;
        }

        # Keycloak intermediate OAuth server
        # <--------------------------->
        location ^~ /auth {
            try_files $uri $uri/ @kc-proxy;
        }
        location @kc-proxy {
            # adding gzip to static contents
            gzip_static on;

            # allow the CROS requests
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

            # Without this, the application may mistakenly generate ‘http’ URLs in ‘https’ responses,
            # leading to mixed content warnings or broken applications.
            proxy_set_header X-Forwarded-Proto $scheme;
            # If you want to be able to handle streaming request/responses or other fancy features like Comet,
            # Long polling, or Web sockets, you need to turn off the proxy buffering.
            proxy_buffering off;

            proxy_pass http://keycloak-nodes;                

            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        }


        location /oauth2/ {
            proxy_set_header Host                    $host;
            proxy_set_header X-Real-IP               $remote_addr;
            proxy_set_header X-Scheme                $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;

            proxy_pass http://oauth2_proxy:4180;
        }
        location = /oauth2/auth {
            proxy_set_header Host             $host;
            proxy_set_header X-Real-IP        $remote_addr;
            proxy_set_header X-Scheme         $scheme;
            # nginx auth_request includes headers but not body
            proxy_set_header Content-Length   "";
            proxy_pass_request_body           off;

            proxy_pass http://oauth2_proxy:4180;
        }

        location / {
            if ($request_method = GET) {
                proxy_pass http://api-get-python-nodes;
                break;
            }

            try_files / @protected;
        }

        location @protected {
            error_page 401 = /oauth2/start; # Redirect to keycloak via oauth2-proxy if not logged in.
            auth_request /oauth2/auth; # Check if logged in and get info.

            # add auth user details as headers to backend.
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            auth_request_set $groups  $upstream_http_x_auth_request_groups;
            auth_request_set $username $upstream_http_x_auth_request_preferred_username;
            proxy_set_header X-User  $user;
            proxy_set_header X-Email $email;
            proxy_set_header X-Groups $groups;
            proxy_set_header X-Preferred-Username $username;
            # capture and set the oauth access token
            # ref: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#configuring-for-use-with-the-nginx-auth_request-directive
            auth_request_set $token  $upstream_http_x_auth_request_access_token;
            proxy_set_header X-Access-Token $token;

            proxy_pass http://api-edit-rust-nodes;

        }

        location /login {
            proxy_pass http://oauth2_proxy:4180/oauth2/sign_in;

            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        }

        location /logout {
            proxy_pass http://oauth2_proxy:4180/oauth2/sign_out;

            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Auth-Request-Redirect https://dps.epita.local/auth/realms/epita/protocol/openid-connect/logout;
        }
    }
}
